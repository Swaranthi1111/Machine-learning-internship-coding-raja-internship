{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "IMAGE CLASSIFICATION FOR FOOD RECOGNITION "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From c:\\Users\\AKSHAAY KG\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\keras\\src\\losses.py:2976: The name tf.losses.sparse_softmax_cross_entropy is deprecated. Please use tf.compat.v1.losses.sparse_softmax_cross_entropy instead.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import cv2\n",
    "import os\n",
    "import matplotlib.pyplot as plt\n",
    "import tensorflow as tf\n",
    "from tensorflow import keras"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Data collection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# get image data from files \n",
    "Directory = \"D:\\INTERNSHIP\\CODING RAJA\\PRO\\Food Classification dataset\"\n",
    "classes = [\"apple_pie\",\"Baked Potato\", \"burger\", \"butter_naan\", \"cheesecake\",  \"chole_bhature\", \"Donut\", \"fried_rice\", \"Fries\", \"Hot Dog\", \"ice_cream\", \"jalebi\", \"kadai_paneer\", \"kulfi\",  \"momos\", \"pav_bhaji\", \"pizza\", \"samosa\", \"Sandwich\", \"sushi\", \"Taco\", \"Taquito\" ]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "#create training data\n",
    "training_data = []\n",
    "img_size = 128\n",
    "for c in classes:\n",
    "    path = os.path.join(Directory,c)\n",
    "    class_num = classes.index(c)\n",
    "    for img in os.listdir(path):\n",
    "        img_array = cv2.imread(os.path.join(path,img), cv2.IMREAD_GRAYSCALE)\n",
    "        if img_array is None:\n",
    "            print(f\"Failed to read image: {path}\")\n",
    "            continue\n",
    "        back2rgb = cv2.cvtColor(img_array, cv2.COLOR_GRAY2RGB)\n",
    "        new_arr = cv2.resize(back2rgb,(img_size,img_size))\n",
    "        training_data.append([new_arr,class_num])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "#shuffling to avoid over fitting \n",
    "import random\n",
    "random.shuffle(training_data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "feature selection "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# x img in array, y output \n",
    "x = []\n",
    "y = []\n",
    "\n",
    "for features, label in training_data:\n",
    "    x.append(features)\n",
    "    y.append(label)\n",
    "    \n",
    "x = np.array(x).reshape(-1,img_size,img_size,3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[[[171, 171, 171],\n",
       "         [172, 172, 172],\n",
       "         [174, 174, 174],\n",
       "         ...,\n",
       "         [199, 199, 199],\n",
       "         [198, 198, 198],\n",
       "         [198, 198, 198]],\n",
       "\n",
       "        [[171, 171, 171],\n",
       "         [173, 173, 173],\n",
       "         [174, 174, 174],\n",
       "         ...,\n",
       "         [200, 200, 200],\n",
       "         [198, 198, 198],\n",
       "         [198, 198, 198]],\n",
       "\n",
       "        [[172, 172, 172],\n",
       "         [173, 173, 173],\n",
       "         [175, 175, 175],\n",
       "         ...,\n",
       "         [200, 200, 200],\n",
       "         [199, 199, 199],\n",
       "         [199, 199, 199]],\n",
       "\n",
       "        ...,\n",
       "\n",
       "        [[176, 176, 176],\n",
       "         [177, 177, 177],\n",
       "         [178, 178, 178],\n",
       "         ...,\n",
       "         [213, 213, 213],\n",
       "         [213, 213, 213],\n",
       "         [213, 213, 213]],\n",
       "\n",
       "        [[176, 176, 176],\n",
       "         [176, 176, 176],\n",
       "         [177, 177, 177],\n",
       "         ...,\n",
       "         [212, 212, 212],\n",
       "         [212, 212, 212],\n",
       "         [212, 212, 212]],\n",
       "\n",
       "        [[175, 175, 175],\n",
       "         [176, 176, 176],\n",
       "         [177, 177, 177],\n",
       "         ...,\n",
       "         [211, 211, 211],\n",
       "         [211, 211, 211],\n",
       "         [211, 211, 211]]],\n",
       "\n",
       "\n",
       "       [[[111, 111, 111],\n",
       "         [ 76,  76,  76],\n",
       "         [179, 179, 179],\n",
       "         ...,\n",
       "         [230, 230, 230],\n",
       "         [135, 135, 135],\n",
       "         [ 77,  77,  77]],\n",
       "\n",
       "        [[130, 130, 130],\n",
       "         [ 63,  63,  63],\n",
       "         [171, 171, 171],\n",
       "         ...,\n",
       "         [249, 249, 249],\n",
       "         [107, 107, 107],\n",
       "         [ 79,  79,  79]],\n",
       "\n",
       "        [[144, 144, 144],\n",
       "         [ 65,  65,  65],\n",
       "         [162, 162, 162],\n",
       "         ...,\n",
       "         [174, 174, 174],\n",
       "         [ 82,  82,  82],\n",
       "         [ 82,  82,  82]],\n",
       "\n",
       "        ...,\n",
       "\n",
       "        [[ 70,  70,  70],\n",
       "         [ 73,  73,  73],\n",
       "         [ 91,  91,  91],\n",
       "         ...,\n",
       "         [ 22,  22,  22],\n",
       "         [ 22,  22,  22],\n",
       "         [ 22,  22,  22]],\n",
       "\n",
       "        [[ 89,  89,  89],\n",
       "         [ 95,  95,  95],\n",
       "         [112, 112, 112],\n",
       "         ...,\n",
       "         [ 22,  22,  22],\n",
       "         [ 22,  22,  22],\n",
       "         [ 22,  22,  22]],\n",
       "\n",
       "        [[107, 107, 107],\n",
       "         [109, 109, 109],\n",
       "         [128, 128, 128],\n",
       "         ...,\n",
       "         [ 22,  22,  22],\n",
       "         [ 22,  22,  22],\n",
       "         [ 22,  22,  22]]],\n",
       "\n",
       "\n",
       "       [[[191, 191, 191],\n",
       "         [191, 191, 191],\n",
       "         [191, 191, 191],\n",
       "         ...,\n",
       "         [189, 189, 189],\n",
       "         [182, 182, 182],\n",
       "         [182, 182, 182]],\n",
       "\n",
       "        [[193, 193, 193],\n",
       "         [193, 193, 193],\n",
       "         [193, 193, 193],\n",
       "         ...,\n",
       "         [191, 191, 191],\n",
       "         [182, 182, 182],\n",
       "         [181, 181, 181]],\n",
       "\n",
       "        [[195, 195, 195],\n",
       "         [195, 195, 195],\n",
       "         [195, 195, 195],\n",
       "         ...,\n",
       "         [182, 182, 182],\n",
       "         [171, 171, 171],\n",
       "         [168, 168, 168]],\n",
       "\n",
       "        ...,\n",
       "\n",
       "        [[105, 105, 105],\n",
       "         [102, 102, 102],\n",
       "         [ 99,  99,  99],\n",
       "         ...,\n",
       "         [166, 166, 166],\n",
       "         [160, 160, 160],\n",
       "         [148, 148, 148]],\n",
       "\n",
       "        [[107, 107, 107],\n",
       "         [104, 104, 104],\n",
       "         [100, 100, 100],\n",
       "         ...,\n",
       "         [177, 177, 177],\n",
       "         [163, 163, 163],\n",
       "         [137, 137, 137]],\n",
       "\n",
       "        [[107, 107, 107],\n",
       "         [106, 106, 106],\n",
       "         [105, 105, 105],\n",
       "         ...,\n",
       "         [214, 214, 214],\n",
       "         [182, 182, 182],\n",
       "         [111, 111, 111]]],\n",
       "\n",
       "\n",
       "       ...,\n",
       "\n",
       "\n",
       "       [[[238, 238, 238],\n",
       "         [238, 238, 238],\n",
       "         [238, 238, 238],\n",
       "         ...,\n",
       "         [238, 238, 238],\n",
       "         [238, 238, 238],\n",
       "         [237, 237, 237]],\n",
       "\n",
       "        [[238, 238, 238],\n",
       "         [238, 238, 238],\n",
       "         [238, 238, 238],\n",
       "         ...,\n",
       "         [238, 238, 238],\n",
       "         [237, 237, 237],\n",
       "         [237, 237, 237]],\n",
       "\n",
       "        [[238, 238, 238],\n",
       "         [238, 238, 238],\n",
       "         [238, 238, 238],\n",
       "         ...,\n",
       "         [237, 237, 237],\n",
       "         [237, 237, 237],\n",
       "         [236, 236, 236]],\n",
       "\n",
       "        ...,\n",
       "\n",
       "        [[221, 221, 221],\n",
       "         [220, 220, 220],\n",
       "         [219, 219, 219],\n",
       "         ...,\n",
       "         [197, 197, 197],\n",
       "         [201, 201, 201],\n",
       "         [202, 202, 202]],\n",
       "\n",
       "        [[210, 210, 210],\n",
       "         [221, 221, 221],\n",
       "         [215, 215, 215],\n",
       "         ...,\n",
       "         [208, 208, 208],\n",
       "         [210, 210, 210],\n",
       "         [208, 208, 208]],\n",
       "\n",
       "        [[218, 218, 218],\n",
       "         [215, 215, 215],\n",
       "         [213, 213, 213],\n",
       "         ...,\n",
       "         [213, 213, 213],\n",
       "         [212, 212, 212],\n",
       "         [211, 211, 211]]],\n",
       "\n",
       "\n",
       "       [[[242, 242, 242],\n",
       "         [244, 244, 244],\n",
       "         [214, 214, 214],\n",
       "         ...,\n",
       "         [244, 244, 244],\n",
       "         [242, 242, 242],\n",
       "         [241, 241, 241]],\n",
       "\n",
       "        [[243, 243, 243],\n",
       "         [239, 239, 239],\n",
       "         [171, 171, 171],\n",
       "         ...,\n",
       "         [243, 243, 243],\n",
       "         [243, 243, 243],\n",
       "         [240, 240, 240]],\n",
       "\n",
       "        [[242, 242, 242],\n",
       "         [192, 192, 192],\n",
       "         [160, 160, 160],\n",
       "         ...,\n",
       "         [244, 244, 244],\n",
       "         [242, 242, 242],\n",
       "         [239, 239, 239]],\n",
       "\n",
       "        ...,\n",
       "\n",
       "        [[227, 227, 227],\n",
       "         [229, 229, 229],\n",
       "         [229, 229, 229],\n",
       "         ...,\n",
       "         [243, 243, 243],\n",
       "         [243, 243, 243],\n",
       "         [242, 242, 242]],\n",
       "\n",
       "        [[229, 229, 229],\n",
       "         [229, 229, 229],\n",
       "         [230, 230, 230],\n",
       "         ...,\n",
       "         [243, 243, 243],\n",
       "         [243, 243, 243],\n",
       "         [242, 242, 242]],\n",
       "\n",
       "        [[231, 231, 231],\n",
       "         [229, 229, 229],\n",
       "         [230, 230, 230],\n",
       "         ...,\n",
       "         [243, 243, 243],\n",
       "         [242, 242, 242],\n",
       "         [241, 241, 241]]],\n",
       "\n",
       "\n",
       "       [[[ 25,  25,  25],\n",
       "         [ 10,  10,  10],\n",
       "         [  4,   4,   4],\n",
       "         ...,\n",
       "         [ 48,  48,  48],\n",
       "         [ 45,  45,  45],\n",
       "         [ 46,  46,  46]],\n",
       "\n",
       "        [[ 21,  21,  21],\n",
       "         [ 10,  10,  10],\n",
       "         [  5,   5,   5],\n",
       "         ...,\n",
       "         [ 50,  50,  50],\n",
       "         [ 46,  46,  46],\n",
       "         [ 46,  46,  46]],\n",
       "\n",
       "        [[ 16,  16,  16],\n",
       "         [ 10,  10,  10],\n",
       "         [  6,   6,   6],\n",
       "         ...,\n",
       "         [ 52,  52,  52],\n",
       "         [ 48,  48,  48],\n",
       "         [ 47,  47,  47]],\n",
       "\n",
       "        ...,\n",
       "\n",
       "        [[ 18,  18,  18],\n",
       "         [ 18,  18,  18],\n",
       "         [ 18,  18,  18],\n",
       "         ...,\n",
       "         [  7,   7,   7],\n",
       "         [  8,   8,   8],\n",
       "         [  9,   9,   9]],\n",
       "\n",
       "        [[ 18,  18,  18],\n",
       "         [ 19,  19,  19],\n",
       "         [ 20,  20,  20],\n",
       "         ...,\n",
       "         [ 13,  13,  13],\n",
       "         [ 11,  11,  11],\n",
       "         [  8,   8,   8]],\n",
       "\n",
       "        [[ 18,  18,  18],\n",
       "         [ 23,  23,  23],\n",
       "         [ 29,  29,  29],\n",
       "         ...,\n",
       "         [ 10,  10,  10],\n",
       "         [  9,   9,   9],\n",
       "         [  8,   8,   8]]]], dtype=uint8)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[17,\n",
       " 20,\n",
       " 1,\n",
       " 15,\n",
       " 2,\n",
       " 14,\n",
       " 15,\n",
       " 16,\n",
       " 7,\n",
       " 19,\n",
       " 0,\n",
       " 5,\n",
       " 17,\n",
       " 20,\n",
       " 0,\n",
       " 11,\n",
       " 20,\n",
       " 21,\n",
       " 5,\n",
       " 5,\n",
       " 18,\n",
       " 4,\n",
       " 10,\n",
       " 0,\n",
       " 2,\n",
       " 19,\n",
       " 11,\n",
       " 7,\n",
       " 4,\n",
       " 1,\n",
       " 4,\n",
       " 14,\n",
       " 16,\n",
       " 16,\n",
       " 16,\n",
       " 5,\n",
       " 1,\n",
       " 2,\n",
       " 7,\n",
       " 19,\n",
       " 0,\n",
       " 20,\n",
       " 20,\n",
       " 18,\n",
       " 1,\n",
       " 17,\n",
       " 13,\n",
       " 0,\n",
       " 3,\n",
       " 1,\n",
       " 19,\n",
       " 20,\n",
       " 14,\n",
       " 17,\n",
       " 7,\n",
       " 16,\n",
       " 0,\n",
       " 3,\n",
       " 6,\n",
       " 4,\n",
       " 2,\n",
       " 16,\n",
       " 20,\n",
       " 20,\n",
       " 6,\n",
       " 16,\n",
       " 18,\n",
       " 15,\n",
       " 9,\n",
       " 6,\n",
       " 16,\n",
       " 12,\n",
       " 13,\n",
       " 15,\n",
       " 14,\n",
       " 2,\n",
       " 20,\n",
       " 1,\n",
       " 19,\n",
       " 16,\n",
       " 7,\n",
       " 19,\n",
       " 8,\n",
       " 0,\n",
       " 20,\n",
       " 16,\n",
       " 5,\n",
       " 11,\n",
       " 17,\n",
       " 17,\n",
       " 4,\n",
       " 4,\n",
       " 7,\n",
       " 3,\n",
       " 19,\n",
       " 2,\n",
       " 17,\n",
       " 21,\n",
       " 16,\n",
       " 5,\n",
       " 3,\n",
       " 5,\n",
       " 3,\n",
       " 10,\n",
       " 14,\n",
       " 5,\n",
       " 11,\n",
       " 1,\n",
       " 2,\n",
       " 16,\n",
       " 13,\n",
       " 19,\n",
       " 11,\n",
       " 19,\n",
       " 20,\n",
       " 16,\n",
       " 16,\n",
       " 18,\n",
       " 11,\n",
       " 0,\n",
       " 19,\n",
       " 8,\n",
       " 18,\n",
       " 17,\n",
       " 12,\n",
       " 12,\n",
       " 15,\n",
       " 20,\n",
       " 3,\n",
       " 16,\n",
       " 19,\n",
       " 19,\n",
       " 7,\n",
       " 19,\n",
       " 6,\n",
       " 13,\n",
       " 6,\n",
       " 16,\n",
       " 21,\n",
       " 16,\n",
       " 16,\n",
       " 8,\n",
       " 8,\n",
       " 6,\n",
       " 5,\n",
       " 20,\n",
       " 10,\n",
       " 3,\n",
       " 20,\n",
       " 3,\n",
       " 6,\n",
       " 14,\n",
       " 1,\n",
       " 0,\n",
       " 0,\n",
       " 9,\n",
       " 4,\n",
       " 17,\n",
       " 12,\n",
       " 20,\n",
       " 8,\n",
       " 20,\n",
       " 16,\n",
       " 14,\n",
       " 7,\n",
       " 4,\n",
       " 11,\n",
       " 13,\n",
       " 20,\n",
       " 8,\n",
       " 17,\n",
       " 6,\n",
       " 1,\n",
       " 1,\n",
       " 8,\n",
       " 9,\n",
       " 19,\n",
       " 11,\n",
       " 5,\n",
       " 6,\n",
       " 4,\n",
       " 14,\n",
       " 4,\n",
       " 18,\n",
       " 20,\n",
       " 21,\n",
       " 16,\n",
       " 14,\n",
       " 15,\n",
       " 3,\n",
       " 20,\n",
       " 0,\n",
       " 16,\n",
       " 19,\n",
       " 9,\n",
       " 20,\n",
       " 20,\n",
       " 20,\n",
       " 8,\n",
       " 13,\n",
       " 16,\n",
       " 19,\n",
       " 13,\n",
       " 10,\n",
       " 12,\n",
       " 5,\n",
       " 6,\n",
       " 12,\n",
       " 4,\n",
       " 14,\n",
       " 20,\n",
       " 16,\n",
       " 15,\n",
       " 11,\n",
       " 19,\n",
       " 3,\n",
       " 14,\n",
       " 14,\n",
       " 16,\n",
       " 16,\n",
       " 18,\n",
       " 7,\n",
       " 20,\n",
       " 16,\n",
       " 17,\n",
       " 16,\n",
       " 16,\n",
       " 8,\n",
       " 12,\n",
       " 19,\n",
       " 3,\n",
       " 17,\n",
       " 19,\n",
       " 1,\n",
       " 3,\n",
       " 14,\n",
       " 20,\n",
       " 3,\n",
       " 21,\n",
       " 16,\n",
       " 16,\n",
       " 19,\n",
       " 6,\n",
       " 20,\n",
       " 13,\n",
       " 2,\n",
       " 9,\n",
       " 19,\n",
       " 0,\n",
       " 20,\n",
       " 16,\n",
       " 11,\n",
       " 4,\n",
       " 1,\n",
       " 9,\n",
       " 19,\n",
       " 6,\n",
       " 14,\n",
       " 1,\n",
       " 13,\n",
       " 12,\n",
       " 21,\n",
       " 21,\n",
       " 5,\n",
       " 16,\n",
       " 13,\n",
       " 21,\n",
       " 12,\n",
       " 14,\n",
       " 20,\n",
       " 0,\n",
       " 20,\n",
       " 8,\n",
       " 12,\n",
       " 20,\n",
       " 1,\n",
       " 9,\n",
       " 13,\n",
       " 16,\n",
       " 12,\n",
       " 20,\n",
       " 16,\n",
       " 8,\n",
       " 2,\n",
       " 6,\n",
       " 9,\n",
       " 4,\n",
       " 2,\n",
       " 4,\n",
       " 20,\n",
       " 20,\n",
       " 20,\n",
       " 3,\n",
       " 20,\n",
       " 11,\n",
       " 20,\n",
       " 2,\n",
       " 17,\n",
       " 17,\n",
       " 20,\n",
       " 13,\n",
       " 10,\n",
       " 10,\n",
       " 9,\n",
       " 4,\n",
       " 7,\n",
       " 5,\n",
       " 10,\n",
       " 9,\n",
       " 15,\n",
       " 9,\n",
       " 19,\n",
       " 19,\n",
       " 18,\n",
       " 16,\n",
       " 5,\n",
       " 18,\n",
       " 7,\n",
       " 2,\n",
       " 5,\n",
       " 1,\n",
       " 0,\n",
       " 14,\n",
       " 7,\n",
       " 5,\n",
       " 2,\n",
       " 16,\n",
       " 0,\n",
       " 8,\n",
       " 17,\n",
       " 9,\n",
       " 9,\n",
       " 10,\n",
       " 11,\n",
       " 19,\n",
       " 16,\n",
       " 13,\n",
       " 13,\n",
       " 5,\n",
       " 18,\n",
       " 0,\n",
       " 7,\n",
       " 12,\n",
       " 10,\n",
       " 14,\n",
       " 16,\n",
       " 9,\n",
       " 21,\n",
       " 18,\n",
       " 11,\n",
       " 3,\n",
       " 3,\n",
       " 15,\n",
       " 3,\n",
       " 1,\n",
       " 12,\n",
       " 6,\n",
       " 3,\n",
       " 15,\n",
       " 16,\n",
       " 10,\n",
       " 20,\n",
       " 11,\n",
       " 16,\n",
       " 4,\n",
       " 20,\n",
       " 16,\n",
       " 4,\n",
       " 14,\n",
       " 5,\n",
       " 2,\n",
       " 4,\n",
       " 16,\n",
       " 14,\n",
       " 6,\n",
       " 7,\n",
       " 12,\n",
       " 17,\n",
       " 11,\n",
       " 15,\n",
       " 6,\n",
       " 10,\n",
       " 9,\n",
       " 17,\n",
       " 4,\n",
       " 18,\n",
       " 9,\n",
       " 16,\n",
       " 13,\n",
       " 20,\n",
       " 2,\n",
       " 17,\n",
       " 14,\n",
       " 13,\n",
       " 11,\n",
       " 20,\n",
       " 21,\n",
       " 18,\n",
       " 16,\n",
       " 16,\n",
       " 14,\n",
       " 4,\n",
       " 12,\n",
       " 20,\n",
       " 3,\n",
       " 0,\n",
       " 10,\n",
       " 16,\n",
       " 21,\n",
       " 2,\n",
       " 17,\n",
       " 13,\n",
       " 18,\n",
       " 17,\n",
       " 11,\n",
       " 16,\n",
       " 2,\n",
       " 19,\n",
       " 6,\n",
       " 16,\n",
       " 19,\n",
       " 15,\n",
       " 0,\n",
       " 15,\n",
       " 14,\n",
       " 16,\n",
       " 5,\n",
       " 12,\n",
       " 5,\n",
       " 12,\n",
       " 11,\n",
       " 10,\n",
       " 1,\n",
       " 6,\n",
       " 11,\n",
       " 15,\n",
       " 10,\n",
       " 19,\n",
       " 20,\n",
       " 16,\n",
       " 4,\n",
       " 16,\n",
       " 18,\n",
       " 3,\n",
       " 21,\n",
       " 17,\n",
       " 9,\n",
       " 16,\n",
       " 17,\n",
       " 6,\n",
       " 12,\n",
       " 11,\n",
       " 17,\n",
       " 11,\n",
       " 4,\n",
       " 6,\n",
       " 3,\n",
       " 20,\n",
       " 20,\n",
       " 2,\n",
       " 19,\n",
       " 12,\n",
       " 18,\n",
       " 16,\n",
       " 14,\n",
       " 2,\n",
       " 14,\n",
       " 14,\n",
       " 6,\n",
       " 3,\n",
       " 16,\n",
       " 10,\n",
       " 18,\n",
       " 9,\n",
       " 20,\n",
       " 2,\n",
       " 3,\n",
       " 7,\n",
       " 2,\n",
       " 10,\n",
       " 3,\n",
       " 4,\n",
       " 11,\n",
       " 6,\n",
       " 11,\n",
       " 19,\n",
       " 21,\n",
       " 17,\n",
       " 19,\n",
       " 17,\n",
       " 20,\n",
       " 7,\n",
       " 18,\n",
       " 4,\n",
       " 9,\n",
       " 15,\n",
       " 5,\n",
       " 20,\n",
       " 13,\n",
       " 18,\n",
       " 14,\n",
       " 20,\n",
       " 3,\n",
       " 17,\n",
       " 16,\n",
       " 2,\n",
       " 5,\n",
       " 2,\n",
       " 7,\n",
       " 17,\n",
       " 5,\n",
       " 2,\n",
       " 20,\n",
       " 16,\n",
       " 0,\n",
       " 19,\n",
       " 0,\n",
       " 18,\n",
       " 18,\n",
       " 7,\n",
       " 15,\n",
       " 5,\n",
       " 11,\n",
       " 9,\n",
       " 9,\n",
       " 14,\n",
       " 1,\n",
       " 8,\n",
       " 9,\n",
       " 12,\n",
       " 18,\n",
       " 8,\n",
       " 13,\n",
       " 20,\n",
       " 20,\n",
       " 20,\n",
       " 18,\n",
       " 4,\n",
       " 18,\n",
       " 14,\n",
       " 9,\n",
       " 20,\n",
       " 11,\n",
       " 9,\n",
       " 16,\n",
       " 13,\n",
       " 21,\n",
       " 9,\n",
       " 21,\n",
       " 12,\n",
       " 19,\n",
       " 0,\n",
       " 9,\n",
       " 2,\n",
       " 16,\n",
       " 20,\n",
       " 6,\n",
       " 20,\n",
       " 3,\n",
       " 19,\n",
       " 4,\n",
       " 9,\n",
       " 15,\n",
       " 2,\n",
       " 8,\n",
       " 8,\n",
       " 16,\n",
       " 15,\n",
       " 7,\n",
       " 4,\n",
       " 15,\n",
       " 8,\n",
       " 14,\n",
       " 5,\n",
       " 2,\n",
       " 19,\n",
       " 18,\n",
       " 7,\n",
       " 16,\n",
       " 15,\n",
       " 11,\n",
       " 16,\n",
       " 20,\n",
       " 19,\n",
       " 15,\n",
       " 20,\n",
       " 18,\n",
       " 4,\n",
       " 20,\n",
       " 11,\n",
       " 14,\n",
       " 6,\n",
       " 10,\n",
       " 15,\n",
       " 11,\n",
       " 20,\n",
       " 0,\n",
       " 3,\n",
       " 5,\n",
       " 20,\n",
       " 13,\n",
       " 9,\n",
       " 10,\n",
       " 18,\n",
       " 18,\n",
       " 19,\n",
       " 8,\n",
       " 16,\n",
       " 18,\n",
       " 8,\n",
       " 11,\n",
       " 0,\n",
       " 13,\n",
       " 16,\n",
       " 21,\n",
       " 11,\n",
       " 3,\n",
       " 17,\n",
       " 8,\n",
       " 2,\n",
       " 13,\n",
       " 1,\n",
       " 11,\n",
       " 16,\n",
       " 7,\n",
       " 5,\n",
       " 18,\n",
       " 16,\n",
       " 2,\n",
       " 4,\n",
       " 7,\n",
       " 13,\n",
       " 2,\n",
       " 4,\n",
       " 18,\n",
       " 0,\n",
       " 11,\n",
       " 19,\n",
       " 20,\n",
       " 6,\n",
       " 12,\n",
       " 21,\n",
       " 16,\n",
       " 14,\n",
       " 6,\n",
       " 19,\n",
       " 16,\n",
       " 16,\n",
       " 12,\n",
       " 17,\n",
       " 20,\n",
       " 18,\n",
       " 10,\n",
       " 6,\n",
       " 21,\n",
       " 1,\n",
       " 7,\n",
       " 5,\n",
       " 0,\n",
       " 14,\n",
       " 0,\n",
       " 18,\n",
       " 0,\n",
       " 9,\n",
       " 3,\n",
       " 4,\n",
       " 16,\n",
       " 19,\n",
       " 1,\n",
       " 20,\n",
       " 16,\n",
       " 15,\n",
       " 11,\n",
       " 0,\n",
       " 21,\n",
       " 16,\n",
       " 20,\n",
       " 17,\n",
       " 18,\n",
       " 18,\n",
       " 18,\n",
       " 16,\n",
       " 16,\n",
       " 0,\n",
       " 4,\n",
       " 16,\n",
       " 18,\n",
       " 15,\n",
       " 12,\n",
       " 14,\n",
       " 16,\n",
       " 6,\n",
       " 1,\n",
       " 19,\n",
       " 0,\n",
       " 0,\n",
       " 2,\n",
       " 16,\n",
       " 1,\n",
       " 13,\n",
       " 7,\n",
       " 10,\n",
       " 5,\n",
       " 1,\n",
       " 16,\n",
       " 4,\n",
       " 0,\n",
       " 16,\n",
       " 7,\n",
       " 9,\n",
       " 17,\n",
       " 13,\n",
       " 14,\n",
       " 16,\n",
       " 15,\n",
       " 13,\n",
       " 8,\n",
       " 16,\n",
       " 20,\n",
       " 10,\n",
       " 21,\n",
       " 19,\n",
       " 20,\n",
       " 14,\n",
       " 12,\n",
       " 19,\n",
       " 21,\n",
       " 21,\n",
       " 0,\n",
       " 0,\n",
       " 19,\n",
       " 21,\n",
       " 4,\n",
       " 19,\n",
       " 5,\n",
       " 14,\n",
       " 1,\n",
       " 3,\n",
       " 15,\n",
       " 1,\n",
       " 19,\n",
       " 11,\n",
       " 4,\n",
       " 1,\n",
       " 16,\n",
       " 6,\n",
       " 11,\n",
       " 2,\n",
       " 12,\n",
       " 18,\n",
       " 8,\n",
       " 16,\n",
       " 6,\n",
       " 5,\n",
       " 3,\n",
       " 4,\n",
       " 1,\n",
       " 16,\n",
       " 2,\n",
       " 15,\n",
       " 19,\n",
       " 14,\n",
       " 20,\n",
       " 0,\n",
       " 11,\n",
       " 17,\n",
       " 15,\n",
       " 20,\n",
       " 20,\n",
       " 21,\n",
       " 16,\n",
       " 3,\n",
       " 20,\n",
       " 20,\n",
       " 10,\n",
       " 19,\n",
       " 12,\n",
       " 18,\n",
       " 7,\n",
       " 16,\n",
       " 6,\n",
       " 14,\n",
       " 10,\n",
       " 18,\n",
       " 18,\n",
       " 20,\n",
       " 8,\n",
       " 0,\n",
       " 9,\n",
       " 14,\n",
       " 20,\n",
       " 9,\n",
       " 14,\n",
       " 1,\n",
       " 2,\n",
       " 20,\n",
       " 20,\n",
       " 9,\n",
       " 20,\n",
       " 17,\n",
       " 6,\n",
       " 8,\n",
       " 20,\n",
       " 14,\n",
       " 2,\n",
       " 14,\n",
       " 1,\n",
       " 20,\n",
       " 15,\n",
       " 2,\n",
       " 16,\n",
       " 6]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "data preprocessing "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(812, 128, 128, 3)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "#normazlization give val in range between 0 to 1\n",
    "x = x/225.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "y = np.array(y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "data splitting "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(649, 128, 128, 3)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(163, 128, 128, 3)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_test.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "CNN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From c:\\Users\\AKSHAAY KG\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\keras\\src\\backend.py:873: The name tf.get_default_graph is deprecated. Please use tf.compat.v1.get_default_graph instead.\n",
      "\n",
      "WARNING:tensorflow:From c:\\Users\\AKSHAAY KG\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\keras\\src\\layers\\pooling\\max_pooling2d.py:161: The name tf.nn.max_pool is deprecated. Please use tf.nn.max_pool2d instead.\n",
      "\n",
      "WARNING:tensorflow:From c:\\Users\\AKSHAAY KG\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\keras\\src\\optimizers\\__init__.py:309: The name tf.train.Optimizer is deprecated. Please use tf.compat.v1.train.Optimizer instead.\n",
      "\n",
      "Epoch 1/15\n",
      "WARNING:tensorflow:From c:\\Users\\AKSHAAY KG\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\keras\\src\\utils\\tf_utils.py:492: The name tf.ragged.RaggedTensorValue is deprecated. Please use tf.compat.v1.ragged.RaggedTensorValue instead.\n",
      "\n",
      "WARNING:tensorflow:From c:\\Users\\AKSHAAY KG\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\keras\\src\\engine\\base_layer_utils.py:384: The name tf.executing_eagerly_outside_functions is deprecated. Please use tf.compat.v1.executing_eagerly_outside_functions instead.\n",
      "\n",
      "21/21 [==============================] - 5s 136ms/step - loss: 3.2274 - accuracy: 0.0971\n",
      "Epoch 2/15\n",
      "21/21 [==============================] - 3s 132ms/step - loss: 3.0275 - accuracy: 0.1248\n",
      "Epoch 3/15\n",
      "21/21 [==============================] - 3s 125ms/step - loss: 2.9251 - accuracy: 0.1387\n",
      "Epoch 4/15\n",
      "21/21 [==============================] - 3s 130ms/step - loss: 2.7414 - accuracy: 0.1741\n",
      "Epoch 5/15\n",
      "21/21 [==============================] - 3s 131ms/step - loss: 2.5236 - accuracy: 0.2512\n",
      "Epoch 6/15\n",
      "21/21 [==============================] - 3s 124ms/step - loss: 2.2536 - accuracy: 0.3359\n",
      "Epoch 7/15\n",
      "21/21 [==============================] - 3s 124ms/step - loss: 1.8715 - accuracy: 0.4422\n",
      "Epoch 8/15\n",
      "21/21 [==============================] - 3s 121ms/step - loss: 1.5476 - accuracy: 0.5716\n",
      "Epoch 9/15\n",
      "21/21 [==============================] - 3s 128ms/step - loss: 1.1371 - accuracy: 0.6810\n",
      "Epoch 10/15\n",
      "21/21 [==============================] - 3s 125ms/step - loss: 0.8723 - accuracy: 0.7735\n",
      "Epoch 11/15\n",
      "21/21 [==============================] - 3s 133ms/step - loss: 0.6636 - accuracy: 0.8182\n",
      "Epoch 12/15\n",
      "21/21 [==============================] - 3s 133ms/step - loss: 0.5186 - accuracy: 0.8721\n",
      "Epoch 13/15\n",
      "21/21 [==============================] - 3s 135ms/step - loss: 0.4210 - accuracy: 0.8860\n",
      "Epoch 14/15\n",
      "21/21 [==============================] - 3s 133ms/step - loss: 0.3544 - accuracy: 0.8983\n",
      "Epoch 15/15\n",
      "21/21 [==============================] - 3s 134ms/step - loss: 0.3145 - accuracy: 0.9060\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.src.callbacks.History at 0x223450e8e90>"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = keras.Sequential([\n",
    "    keras.layers.Conv2D(filters=20,kernel_size = (3,3), activation = \"relu\", input_shape = (128,128,3), padding = \"same\"),\n",
    "    keras.layers.MaxPooling2D((2,2)),\n",
    "    keras.layers.Conv2D(filters=24,kernel_size = (3,3), activation = \"relu\", padding = \"same\"),\n",
    "    keras.layers.MaxPooling2D((2,2)),\n",
    "    keras.layers.Flatten(),\n",
    "    keras.layers.Dense(100, activation = \"relu\"),\n",
    "    keras.layers.Dropout(0.2),\n",
    "    keras.layers.Dense(22, activation = \"softmax\"),\n",
    "    \n",
    "])\n",
    "\n",
    "model.compile(\n",
    "    optimizer = \"adam\",\n",
    "    loss = \"sparse_categorical_crossentropy\",\n",
    "    metrics = [\"accuracy\"]\n",
    ")\n",
    "\n",
    "model.fit(x_train,y_train, epochs = 15)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6/6 [==============================] - 1s 27ms/step - loss: 4.2906 - accuracy: 0.1472\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[4.290576934814453, 0.14723926782608032]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.evaluate(x_test,y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6/6 [==============================] - 0s 31ms/step\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[2.4732681e-02, 3.4577048e-03, 2.4803878e-05, ..., 5.2754901e-02,\n",
       "        2.7056715e-01, 1.8642150e-04],\n",
       "       [6.9433285e-05, 5.5779241e-05, 8.6663323e-07, ..., 8.6262339e-04,\n",
       "        3.2246923e-03, 3.0363217e-06],\n",
       "       [1.3171702e-03, 8.7840900e-02, 2.9300779e-04, ..., 1.1285248e-02,\n",
       "        3.8522059e-01, 2.5903112e-03],\n",
       "       ...,\n",
       "       [2.9044380e-04, 8.1887166e-04, 8.7612896e-04, ..., 1.5008974e-02,\n",
       "        1.5447746e-01, 1.0172306e-04],\n",
       "       [2.0570560e-06, 8.9395835e-05, 5.8807814e-01, ..., 2.1471742e-07,\n",
       "        2.2601904e-01, 3.8222799e-03],\n",
       "       [3.1013191e-05, 4.4975444e-05, 1.1665299e-04, ..., 2.0977852e-05,\n",
       "        7.1044225e-01, 5.1018274e-03]], dtype=float32)"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pre = model.predict(x_test)\n",
    "y_pre"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[14,\n",
       " 9,\n",
       " 20,\n",
       " 20,\n",
       " 20,\n",
       " 3,\n",
       " 20,\n",
       " 20,\n",
       " 20,\n",
       " 19,\n",
       " 20,\n",
       " 19,\n",
       " 20,\n",
       " 11,\n",
       " 14,\n",
       " 9,\n",
       " 19,\n",
       " 20,\n",
       " 20,\n",
       " 1,\n",
       " 16,\n",
       " 20,\n",
       " 19,\n",
       " 20,\n",
       " 20,\n",
       " 20,\n",
       " 20,\n",
       " 16,\n",
       " 20,\n",
       " 19,\n",
       " 19,\n",
       " 20,\n",
       " 14,\n",
       " 17,\n",
       " 18,\n",
       " 19,\n",
       " 20,\n",
       " 20,\n",
       " 20,\n",
       " 20,\n",
       " 14,\n",
       " 20,\n",
       " 20,\n",
       " 0,\n",
       " 13,\n",
       " 20,\n",
       " 14,\n",
       " 20,\n",
       " 4,\n",
       " 20,\n",
       " 20,\n",
       " 12,\n",
       " 3,\n",
       " 20,\n",
       " 19,\n",
       " 20,\n",
       " 11,\n",
       " 9,\n",
       " 3,\n",
       " 17,\n",
       " 20,\n",
       " 20,\n",
       " 19,\n",
       " 20,\n",
       " 16,\n",
       " 3,\n",
       " 20,\n",
       " 19,\n",
       " 16,\n",
       " 20,\n",
       " 20,\n",
       " 3,\n",
       " 19,\n",
       " 20,\n",
       " 16,\n",
       " 20,\n",
       " 20,\n",
       " 17,\n",
       " 16,\n",
       " 20,\n",
       " 20,\n",
       " 20,\n",
       " 4,\n",
       " 16,\n",
       " 8,\n",
       " 11,\n",
       " 20,\n",
       " 5,\n",
       " 7,\n",
       " 20,\n",
       " 16,\n",
       " 20,\n",
       " 16,\n",
       " 20,\n",
       " 20,\n",
       " 20,\n",
       " 20,\n",
       " 6,\n",
       " 15,\n",
       " 1,\n",
       " 20,\n",
       " 7,\n",
       " 13,\n",
       " 20,\n",
       " 20,\n",
       " 20,\n",
       " 20,\n",
       " 17,\n",
       " 20,\n",
       " 19,\n",
       " 1,\n",
       " 16,\n",
       " 20,\n",
       " 20,\n",
       " 20,\n",
       " 20,\n",
       " 20,\n",
       " 20,\n",
       " 20,\n",
       " 19,\n",
       " 20,\n",
       " 20,\n",
       " 20,\n",
       " 16,\n",
       " 20,\n",
       " 16,\n",
       " 0,\n",
       " 0,\n",
       " 19,\n",
       " 19,\n",
       " 4,\n",
       " 14,\n",
       " 17,\n",
       " 17,\n",
       " 19,\n",
       " 5,\n",
       " 20,\n",
       " 19,\n",
       " 19,\n",
       " 20,\n",
       " 20,\n",
       " 20,\n",
       " 20,\n",
       " 0,\n",
       " 20,\n",
       " 20,\n",
       " 20,\n",
       " 9,\n",
       " 15,\n",
       " 9,\n",
       " 20,\n",
       " 10,\n",
       " 16,\n",
       " 1,\n",
       " 20,\n",
       " 20,\n",
       " 19,\n",
       " 20,\n",
       " 17,\n",
       " 14,\n",
       " 11,\n",
       " 2,\n",
       " 20]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_classes = [np.argmax(element) for element in y_pre]\n",
    "y_classes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 4,  3,  8, 17, 20,  9,  2,  1, 11,  3, 11, 19,  9,  1,  1, 20,  4,\n",
       "        4, 17, 12, 16, 20, 11, 17,  3, 11, 16, 16, 21,  9,  0, 13,  4, 15,\n",
       "       17,  7, 16,  9, 16, 18,  9, 12,  2,  1, 13, 20, 17, 16,  4, 21,  4,\n",
       "       11,  2, 20, 14, 19, 12, 20,  9, 18,  9,  2, 19,  0,  7,  4, 16,  0,\n",
       "       15, 12, 16,  2, 14,  1, 19, 20,  1, 11, 17, 16, 20, 17, 12, 20,  1,\n",
       "       14, 18, 11,  9, 14, 15, 13,  8, 20,  6,  5,  3,  6, 11,  9, 16, 12,\n",
       "        4, 19, 16,  7,  2,  5, 15, 20,  7, 16, 16, 13, 15,  9,  8,  4,  6,\n",
       "       19, 20, 12,  8, 16,  6, 16, 18,  5,  0,  0,  7,  1, 14,  5, 17, 18,\n",
       "        3,  4, 18, 17, 20, 16,  8,  1, 16, 12,  1, 20,  0, 19,  7, 13, 17,\n",
       "        2, 20, 18,  6, 11, 11, 19, 11,  2, 20])"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "yp = np.array(y_classes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix , classification_report\n",
    "import seaborn as sns\n",
    "cm = confusion_matrix(yp,y_test)\n",
    "sns.heatmap(cm, annot=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.00      0.00      0.00         6\n",
      "           1       0.00      0.00      0.00        10\n",
      "           2       1.00      0.12      0.22         8\n",
      "           3       0.00      0.00      0.00         5\n",
      "           4       0.33      0.10      0.15        10\n",
      "           5       0.00      0.00      0.00         4\n",
      "           6       1.00      0.20      0.33         5\n",
      "           7       0.00      0.00      0.00         6\n",
      "           8       0.00      0.00      0.00         5\n",
      "           9       0.00      0.00      0.00        10\n",
      "          10       0.00      0.00      0.00         0\n",
      "          11       0.25      0.09      0.13        11\n",
      "          12       0.00      0.00      0.00         8\n",
      "          13       0.50      0.20      0.29         5\n",
      "          14       0.00      0.00      0.00         5\n",
      "          15       0.00      0.00      0.00         5\n",
      "          16       0.38      0.29      0.33        17\n",
      "          17       0.00      0.00      0.00        10\n",
      "          18       0.00      0.00      0.00         7\n",
      "          19       0.16      0.38      0.22         8\n",
      "          20       0.14      0.69      0.23        16\n",
      "          21       0.00      0.00      0.00         2\n",
      "\n",
      "    accuracy                           0.15       163\n",
      "   macro avg       0.17      0.09      0.09       163\n",
      "weighted avg       0.19      0.15      0.12       163\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\Users\\AKSHAAY KG\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1469: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "c:\\Users\\AKSHAAY KG\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1469: UndefinedMetricWarning: Recall and F-score are ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "c:\\Users\\AKSHAAY KG\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1469: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "c:\\Users\\AKSHAAY KG\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1469: UndefinedMetricWarning: Recall and F-score are ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "c:\\Users\\AKSHAAY KG\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1469: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "c:\\Users\\AKSHAAY KG\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1469: UndefinedMetricWarning: Recall and F-score are ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_test, yp))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "VGG16 - TRANSFER LEARNING"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "vgg_model = tf.keras.applications.VGG16(include_top=False,\n",
    "                                        weights =\"imagenet\",\n",
    "                                        input_tensor = None,\n",
    "                                        input_shape = (128,128,3),\n",
    "                                        pooling = \"max\",\n",
    "                                        classes = 1000)\n",
    "vgg_model.trainable = False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "inputs = vgg_model.input\n",
    "m =tf.keras.layers.Dense(512,activation = \"relu\")(vgg_model.output)\n",
    "keras.layers.Dropout(rate=0.5)(m)\n",
    "outputs = tf.keras.layers.Dense(22, activation = \"softmax\")(m)\n",
    "vgg_model = tf.keras.Model(inputs=inputs,outputs=outputs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " input_1 (InputLayer)        [(None, 128, 128, 3)]     0         \n",
      "                                                                 \n",
      " block1_conv1 (Conv2D)       (None, 128, 128, 64)      1792      \n",
      "                                                                 \n",
      " block1_conv2 (Conv2D)       (None, 128, 128, 64)      36928     \n",
      "                                                                 \n",
      " block1_pool (MaxPooling2D)  (None, 64, 64, 64)        0         \n",
      "                                                                 \n",
      " block2_conv1 (Conv2D)       (None, 64, 64, 128)       73856     \n",
      "                                                                 \n",
      " block2_conv2 (Conv2D)       (None, 64, 64, 128)       147584    \n",
      "                                                                 \n",
      " block2_pool (MaxPooling2D)  (None, 32, 32, 128)       0         \n",
      "                                                                 \n",
      " block3_conv1 (Conv2D)       (None, 32, 32, 256)       295168    \n",
      "                                                                 \n",
      " block3_conv2 (Conv2D)       (None, 32, 32, 256)       590080    \n",
      "                                                                 \n",
      " block3_conv3 (Conv2D)       (None, 32, 32, 256)       590080    \n",
      "                                                                 \n",
      " block3_pool (MaxPooling2D)  (None, 16, 16, 256)       0         \n",
      "                                                                 \n",
      " block4_conv1 (Conv2D)       (None, 16, 16, 512)       1180160   \n",
      "                                                                 \n",
      " block4_conv2 (Conv2D)       (None, 16, 16, 512)       2359808   \n",
      "                                                                 \n",
      " block4_conv3 (Conv2D)       (None, 16, 16, 512)       2359808   \n",
      "                                                                 \n",
      " block4_pool (MaxPooling2D)  (None, 8, 8, 512)         0         \n",
      "                                                                 \n",
      " block5_conv1 (Conv2D)       (None, 8, 8, 512)         2359808   \n",
      "                                                                 \n",
      " block5_conv2 (Conv2D)       (None, 8, 8, 512)         2359808   \n",
      "                                                                 \n",
      " block5_conv3 (Conv2D)       (None, 8, 8, 512)         2359808   \n",
      "                                                                 \n",
      " block5_pool (MaxPooling2D)  (None, 4, 4, 512)         0         \n",
      "                                                                 \n",
      " global_max_pooling2d (Glob  (None, 512)               0         \n",
      " alMaxPooling2D)                                                 \n",
      "                                                                 \n",
      " dense_2 (Dense)             (None, 512)               262656    \n",
      "                                                                 \n",
      " dense_3 (Dense)             (None, 22)                11286     \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 14988630 (57.18 MB)\n",
      "Trainable params: 273942 (1.05 MB)\n",
      "Non-trainable params: 14714688 (56.13 MB)\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "vgg_model.compile(optimizer=\"adam\",\n",
    "                  loss = \"sparse_categorical_crossentropy\",\n",
    "                  metrics = [\"accuracy\"])\n",
    "vgg_model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/20\n",
      "26/26 [==============================] - 80s 3s/step - loss: 2.9862 - accuracy: 0.1416 - val_loss: 2.4137 - val_accuracy: 0.3559\n",
      "Epoch 2/20\n",
      "26/26 [==============================] - 70s 3s/step - loss: 2.2071 - accuracy: 0.3916 - val_loss: 1.8376 - val_accuracy: 0.4684\n",
      "Epoch 3/20\n",
      "26/26 [==============================] - 66s 3s/step - loss: 1.7615 - accuracy: 0.5123 - val_loss: 1.4274 - val_accuracy: 0.6564\n",
      "Epoch 4/20\n",
      "26/26 [==============================] - 67s 3s/step - loss: 1.4077 - accuracy: 0.6256 - val_loss: 1.2314 - val_accuracy: 0.6764\n",
      "Epoch 5/20\n",
      "26/26 [==============================] - 99s 4s/step - loss: 1.2109 - accuracy: 0.6798 - val_loss: 1.0233 - val_accuracy: 0.7519\n",
      "Epoch 6/20\n",
      "26/26 [==============================] - 107s 4s/step - loss: 1.0692 - accuracy: 0.7057 - val_loss: 0.8633 - val_accuracy: 0.7904\n",
      "Epoch 7/20\n",
      "26/26 [==============================] - 106s 4s/step - loss: 0.9266 - accuracy: 0.7722 - val_loss: 0.7482 - val_accuracy: 0.8228\n",
      "Epoch 8/20\n",
      "26/26 [==============================] - 109s 4s/step - loss: 0.7371 - accuracy: 0.8374 - val_loss: 0.6732 - val_accuracy: 0.8582\n",
      "Epoch 9/20\n",
      "26/26 [==============================] - 104s 4s/step - loss: 0.6296 - accuracy: 0.8633 - val_loss: 0.5438 - val_accuracy: 0.8921\n",
      "Epoch 10/20\n",
      "26/26 [==============================] - 100s 4s/step - loss: 0.5589 - accuracy: 0.8855 - val_loss: 0.4718 - val_accuracy: 0.9106\n",
      "Epoch 11/20\n",
      "26/26 [==============================] - 107s 4s/step - loss: 0.5005 - accuracy: 0.9039 - val_loss: 0.4252 - val_accuracy: 0.9230\n",
      "Epoch 12/20\n",
      "26/26 [==============================] - 105s 4s/step - loss: 0.4230 - accuracy: 0.9323 - val_loss: 0.3234 - val_accuracy: 0.9661\n",
      "Epoch 13/20\n",
      "26/26 [==============================] - 93s 4s/step - loss: 0.3407 - accuracy: 0.9606 - val_loss: 0.2653 - val_accuracy: 0.9831\n",
      "Epoch 14/20\n",
      "26/26 [==============================] - 71s 3s/step - loss: 0.2791 - accuracy: 0.9791 - val_loss: 0.2307 - val_accuracy: 0.9861\n",
      "Epoch 15/20\n",
      "26/26 [==============================] - 106s 4s/step - loss: 0.2427 - accuracy: 0.9803 - val_loss: 0.1991 - val_accuracy: 0.9954\n",
      "Epoch 16/20\n",
      "26/26 [==============================] - 94s 4s/step - loss: 0.2065 - accuracy: 0.9901 - val_loss: 0.1597 - val_accuracy: 0.9985\n",
      "Epoch 17/20\n",
      "26/26 [==============================] - 69s 3s/step - loss: 0.1887 - accuracy: 0.9914 - val_loss: 0.1469 - val_accuracy: 0.9969\n",
      "Epoch 18/20\n",
      "26/26 [==============================] - 66s 3s/step - loss: 0.1599 - accuracy: 0.9938 - val_loss: 0.1228 - val_accuracy: 0.9985\n",
      "Epoch 19/20\n",
      "26/26 [==============================] - 73s 3s/step - loss: 0.1363 - accuracy: 0.9975 - val_loss: 0.1107 - val_accuracy: 0.9969\n",
      "Epoch 20/20\n",
      "26/26 [==============================] - 107s 4s/step - loss: 0.1256 - accuracy: 0.9963 - val_loss: 0.0968 - val_accuracy: 0.9969\n"
     ]
    }
   ],
   "source": [
    "history = vgg_model.fit(x=x,y=y,batch_size=32,epochs=20,validation_data=(x_train,y_train),shuffle=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6/6 [==============================] - 12s 2s/step - loss: 0.1140 - accuracy: 0.9939\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[0.1140412911772728, 0.9938650131225586]"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vgg_model.evaluate(x_test,y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6/6 [==============================] - 13s 2s/step\n"
     ]
    }
   ],
   "source": [
    "y_pre = vgg_model.predict(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[4,\n",
       " 3,\n",
       " 8,\n",
       " 17,\n",
       " 20,\n",
       " 9,\n",
       " 2,\n",
       " 1,\n",
       " 11,\n",
       " 3,\n",
       " 11,\n",
       " 19,\n",
       " 9,\n",
       " 1,\n",
       " 1,\n",
       " 20,\n",
       " 4,\n",
       " 4,\n",
       " 17,\n",
       " 12,\n",
       " 16,\n",
       " 20,\n",
       " 11,\n",
       " 17,\n",
       " 3,\n",
       " 11,\n",
       " 16,\n",
       " 16,\n",
       " 21,\n",
       " 9,\n",
       " 0,\n",
       " 13,\n",
       " 4,\n",
       " 15,\n",
       " 17,\n",
       " 7,\n",
       " 16,\n",
       " 9,\n",
       " 16,\n",
       " 18,\n",
       " 9,\n",
       " 12,\n",
       " 2,\n",
       " 1,\n",
       " 13,\n",
       " 20,\n",
       " 17,\n",
       " 16,\n",
       " 4,\n",
       " 21,\n",
       " 4,\n",
       " 11,\n",
       " 2,\n",
       " 20,\n",
       " 14,\n",
       " 19,\n",
       " 12,\n",
       " 20,\n",
       " 9,\n",
       " 18,\n",
       " 9,\n",
       " 2,\n",
       " 19,\n",
       " 0,\n",
       " 7,\n",
       " 4,\n",
       " 16,\n",
       " 0,\n",
       " 16,\n",
       " 12,\n",
       " 16,\n",
       " 2,\n",
       " 14,\n",
       " 1,\n",
       " 19,\n",
       " 20,\n",
       " 1,\n",
       " 11,\n",
       " 17,\n",
       " 16,\n",
       " 20,\n",
       " 17,\n",
       " 12,\n",
       " 20,\n",
       " 1,\n",
       " 14,\n",
       " 18,\n",
       " 11,\n",
       " 9,\n",
       " 14,\n",
       " 15,\n",
       " 13,\n",
       " 8,\n",
       " 20,\n",
       " 6,\n",
       " 5,\n",
       " 3,\n",
       " 6,\n",
       " 11,\n",
       " 9,\n",
       " 16,\n",
       " 12,\n",
       " 4,\n",
       " 19,\n",
       " 16,\n",
       " 7,\n",
       " 2,\n",
       " 5,\n",
       " 15,\n",
       " 20,\n",
       " 7,\n",
       " 16,\n",
       " 16,\n",
       " 13,\n",
       " 15,\n",
       " 9,\n",
       " 8,\n",
       " 4,\n",
       " 6,\n",
       " 19,\n",
       " 20,\n",
       " 12,\n",
       " 8,\n",
       " 16,\n",
       " 6,\n",
       " 16,\n",
       " 18,\n",
       " 5,\n",
       " 0,\n",
       " 0,\n",
       " 7,\n",
       " 1,\n",
       " 14,\n",
       " 5,\n",
       " 17,\n",
       " 18,\n",
       " 3,\n",
       " 4,\n",
       " 18,\n",
       " 17,\n",
       " 20,\n",
       " 16,\n",
       " 8,\n",
       " 1,\n",
       " 16,\n",
       " 12,\n",
       " 1,\n",
       " 20,\n",
       " 0,\n",
       " 19,\n",
       " 7,\n",
       " 13,\n",
       " 17,\n",
       " 2,\n",
       " 20,\n",
       " 18,\n",
       " 6,\n",
       " 11,\n",
       " 11,\n",
       " 19,\n",
       " 11,\n",
       " 2,\n",
       " 20]"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_classes = [np.argmax(element) for element in y_pre]\n",
    "y_classes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 4,  3,  8, 17, 20,  9,  2,  1, 11,  3, 11, 19,  9,  1,  1, 20,  4,\n",
       "        4, 17, 12, 16, 20, 11, 17,  3, 11, 16, 16, 21,  9,  0, 13,  4, 15,\n",
       "       17,  7, 16,  9, 16, 18,  9, 12,  2,  1, 13, 20, 17, 16,  4, 21,  4,\n",
       "       11,  2, 20, 14, 19, 12, 20,  9, 18,  9,  2, 19,  0,  7,  4, 16,  0,\n",
       "       15, 12, 16,  2, 14,  1, 19, 20,  1, 11, 17, 16, 20, 17, 12, 20,  1,\n",
       "       14, 18, 11,  9, 14, 15, 13,  8, 20,  6,  5,  3,  6, 11,  9, 16, 12,\n",
       "        4, 19, 16,  7,  2,  5, 15, 20,  7, 16, 16, 13, 15,  9,  8,  4,  6,\n",
       "       19, 20, 12,  8, 16,  6, 16, 18,  5,  0,  0,  7,  1, 14,  5, 17, 18,\n",
       "        3,  4, 18, 17, 20, 16,  8,  1, 16, 12,  1, 20,  0, 19,  7, 13, 17,\n",
       "        2, 20, 18,  6, 11, 11, 19, 11,  2, 20])"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "yp = np.array(y_classes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix , classification_report\n",
    "import seaborn as sns\n",
    "cm = confusion_matrix(yp,y_test)\n",
    "sns.heatmap(cm, annot=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00         6\n",
      "           1       1.00      1.00      1.00        10\n",
      "           2       1.00      1.00      1.00         8\n",
      "           3       1.00      1.00      1.00         5\n",
      "           4       1.00      1.00      1.00        10\n",
      "           5       1.00      1.00      1.00         4\n",
      "           6       1.00      1.00      1.00         5\n",
      "           7       1.00      1.00      1.00         6\n",
      "           8       1.00      1.00      1.00         5\n",
      "           9       1.00      1.00      1.00        10\n",
      "          11       1.00      1.00      1.00        11\n",
      "          12       1.00      1.00      1.00         8\n",
      "          13       1.00      1.00      1.00         5\n",
      "          14       1.00      1.00      1.00         5\n",
      "          15       1.00      0.80      0.89         5\n",
      "          16       0.94      1.00      0.97        17\n",
      "          17       1.00      1.00      1.00        10\n",
      "          18       1.00      1.00      1.00         7\n",
      "          19       1.00      1.00      1.00         8\n",
      "          20       1.00      1.00      1.00        16\n",
      "          21       1.00      1.00      1.00         2\n",
      "\n",
      "    accuracy                           0.99       163\n",
      "   macro avg       1.00      0.99      0.99       163\n",
      "weighted avg       0.99      0.99      0.99       163\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_test, yp))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
